<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucasの部落格</title>
  
  <subtitle>猪猪</subtitle>
  <link href="https://godlucas.club/atom.xml" rel="self"/>
  
  <link href="https://godlucas.club/"/>
  <updated>2021-08-12T17:41:45.924Z</updated>
  <id>https://godlucas.club/</id>
  
  <author>
    <name>Lucas</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据分析库numpy和pandas的基本使用</title>
    <link href="https://godlucas.club/2021/06/24/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%BA%93numpy%E5%92%8Cpandas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://godlucas.club/2021/06/24/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%BA%93numpy%E5%92%8Cpandas%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-24T01:05:47.000Z</published>
    <updated>2021-08-12T17:41:45.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="Numpy和pandas是什么？"><a href="#Numpy和pandas是什么？" class="headerlink" title="Numpy和pandas是什么？"></a>Numpy和pandas是什么？</h2><p>Numpy是python数值计算最重要的基础包。大多数提供科学计算的包都是用Numpy的数组作为构建基础。</p><p>pandas含有使数据清洗和分析工作变得更快更简单的数据结构和操作工具。pandas经常和其它工具一同使用，如数值计算工具NumPy 和SciPy，分析库statsmodels和scikit-learn，和数据可视化库matplotlib。pandas是基于NumPy数组构建的，特别是基于数组的函数和不使用for循环的数据处理。</p><p>pandas是专门为处理表格和混杂数据设计的。而NumPy更适合处理统一的数值数组数据。</p><p>Numpy的部分功能如下：</p><ul><li>ndarray，一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组。</li><li>用于对整组数据进行快速运算的标准数学函数（无需编写循环）。 </li><li>用于读写磁盘数据的工具以及用于操作内存映射文件的工具。 </li><li>线性代数、随机数生成以及傅里叶变换功能。 </li><li>用于集成由C、C++、Fortran等语言编写的代码的ACAPI。 </li></ul><h2 id="大数据分析应用"><a href="#大数据分析应用" class="headerlink" title="大数据分析应用"></a>大数据分析应用</h2><ul><li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算。 </li><li>常用的数组算法，如排序、唯一化、集合运算等。 </li><li>高效的描述统计和数据聚合/摘要运算。 </li><li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算。 </li><li>将条件逻辑表述为数组表达式（而不是带有if-elif-else分支的循环）。 </li><li>数据的分组运算（聚合、转换、函数应用等）。</li></ul><h1 id="Numpy语法"><a href="#Numpy语法" class="headerlink" title="Numpy语法"></a>Numpy语法</h1><h2 id="…"><a href="#…" class="headerlink" title="…"></a>…</h2>]]></content>
    
    
    <summary type="html">学习总结</summary>
    
    
    
    <category term="🍡godlucas" scheme="https://godlucas.club/categories/%F0%9F%8D%A1godlucas/"/>
    
    
    <category term="📁Python" scheme="https://godlucas.club/tags/%F0%9F%93%81Python/"/>
    
    <category term="🦋数据分析" scheme="https://godlucas.club/tags/%F0%9F%A6%8B%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法总结</title>
    <link href="https://godlucas.club/2021/05/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://godlucas.club/2021/05/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2021-05-10T01:10:10.000Z</published>
    <updated>2021-08-12T17:41:45.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h1><h2 id="评判程序优劣的方法"><a href="#评判程序优劣的方法" class="headerlink" title="评判程序优劣的方法"></a>评判程序优劣的方法</h2><ul><li>消耗计算机资源和执行效率</li><li><p>计算算法执行的耗时</p></li><li><p>时间复杂度（推荐）</p></li></ul><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>评判标准：量化算法执行的操作/执行步骤的数量</li><li><p>最重要的项：时间复杂度表达式最有意义的项</p></li><li><p>大O记法对时间复杂度进行表示：O(量化表达式中最有意义的项)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumofN</span>(<span class="params">n</span>):</span></span><br><span class="line">    theSum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        theSum = thSum + i</span><br><span class="line">    <span class="keyword">return</span> theSum</span><br><span class="line"></span><br><span class="line">print(sumofN(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 1 + n + 1  =====&gt;   n + 2  =====&gt;  O(n)</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">c = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x = i * i</span><br><span class="line">    y = j * j</span><br><span class="line">    z = i * j</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    w = a * k + <span class="number">45</span></span><br><span class="line">    v = b * b</span><br><span class="line">d = <span class="number">33</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 + 3n**2 + 2n + 1 ====&gt; 3n**2 + 2n ====&gt; 3n**2 ====&gt; n**2 ====&gt; O(n**2)</span></span><br></pre></td></tr></table></figure><h2 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h2><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n)  &lt; O(n!) &lt; O(n^n)</p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>特性：先进先出</p><p>应用：每个 web 浏览器都有一个返回按钮。当你浏览网页时，这些网页被放置在一个栈中（实际是网页的网址）。你现在查看的网页在顶部，你第一个查看的网页在底部。如果按‘返回’按钮，将按相反的顺序浏览刚才的页面。</p><h2 id="用python实现一个简单的栈"><a href="#用python实现一个简单的栈" class="headerlink" title="用python实现一个简单的栈"></a>用python实现一个简单的栈</h2><p>需要实现的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- Stack() 创建一个空的新栈。 它不需要参数，并返回一个空栈。</span><br><span class="line">- push(item)将一个新项添加到栈的顶部。它需要 item 做参数并不返回任何内容。</span><br><span class="line">- pop() 从栈中删除顶部项。它不需要参数并返回 item 。栈被修改。</span><br><span class="line">- peek() 从栈返回顶部项，但不会删除它。不需要参数。 不修改栈。</span><br><span class="line">- isEmpty() 测试栈是否为空。不需要参数，并返回布尔值。</span><br><span class="line">- size() 返回栈中的 item 数量。不需要参数，并返回一个整数。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stark</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items) - <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self,items == []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><ul><li>特性：先进先出</li><li><p>应用场景：</p></li><li><p>我们的计算机实验室有 30 台计算机与一台打印机联网。当学生想要打印时，他们的打印任务与正在等待的所有其他打印任务“一致”。第一个进入的任务是先完成。如果你是最后一个，你必须等待你前面的所有其他任务打印</p></li></ul><h2 id="实现一个简单的队列"><a href="#实现一个简单的队列" class="headerlink" title="实现一个简单的队列"></a>实现一个简单的队列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- Queue() 创建一个空的新队列。 它不需要参数，并返回一个空队列。</span><br><span class="line">- enqueue(item) 将新项添加到队尾。 它需要 item 作为参数，并不返回任何内容。</span><br><span class="line">- dequeue() 从队首移除项。它不需要参数并返回 item。 队列被修改。</span><br><span class="line">- isEmpty() 查看队列是否为空。它不需要参数，并返回布尔值。</span><br><span class="line">- size() 返回队列中的项数。它不需要参数，并返回一个整数。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.items.insert(<span class="number">0</span>, item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br></pre></td></tr></table></figure><h2 id="应用（烫手的山芋）"><a href="#应用（烫手的山芋）" class="headerlink" title="应用（烫手的山芋）"></a>应用（烫手的山芋）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- 案例：烫手的山芋</span><br><span class="line">    - 烫手山芋游戏介绍：<span class="number">6</span>个孩子围城一个圈，排列顺序孩子们自己指定。第一个孩子手里有一个烫手的山芋，需要在计时器计时<span class="number">1</span>秒后将山芋传递给下一个孩子，依次类推。规则是，在计时器每计时<span class="number">7</span>秒时，手里有山芋的孩子退出游戏。该游戏直到剩下一个孩子时结束，最后剩下的孩子获胜。请使用队列实现该游戏策略，排在第几个位置最终会获胜。</span><br><span class="line">    - 准则：队头孩子的手里永远要有山芋。</span><br><span class="line">queue = Queue()</span><br><span class="line">kids = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> kid <span class="keyword">in</span> kids:</span><br><span class="line">    queue.enqueue(kid)</span><br><span class="line"><span class="keyword">while</span> queue.size() &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        kid = queue.dequeue()</span><br><span class="line">        queue.enqueue(kid)</span><br><span class="line">    queue.dequeue()</span><br><span class="line">    </span><br><span class="line">print(<span class="string">&#x27;获胜者为：&#x27;</span>, queue.dequeue())</span><br></pre></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>同队列相比，有两个头部和尾部。可以在双端进行数据的插入和删除，提供了单数据结构中栈和队列的特性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- Deque() 创建一个空的新 deque。它不需要参数，并返回空的 deque。</span><br><span class="line">- addFront(item) 将一个新项添加到 deque 的首部。它需要 item 参数 并不返回任何内容。</span><br><span class="line">- addRear(item) 将一个新项添加到 deque 的尾部。它需要 item 参数并不返回任何内容。</span><br><span class="line">- removeFront() 从 deque 中删除首项。它不需要参数并返回 item。deque 被修改。</span><br><span class="line">- removeRear() 从 deque 中删除尾项。它不需要参数并返回 item。deque 被修改。</span><br><span class="line">- isEmpty() 测试 deque 是否为空。它不需要参数，并返回布尔值。</span><br><span class="line">- size() 返回 deque 中的项数。它不需要参数，并返回一个整数。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dequeue</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addFront</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addRear</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.items.insert(<span class="number">0</span>, item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeFront</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeRear</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.items.pop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>案例：回文检查</p><ul><li>回文是一个字符串，读取首尾相同的字符，例如，radar toot madam</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isHuiWen</span>(<span class="params">s</span>):</span></span><br><span class="line">    ex = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    q = Dequeue()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">        q.addFront(ch)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">2</span>):</span><br><span class="line">        font = q.removeFront()</span><br><span class="line">        rear = q.removeRear()</span><br><span class="line">        <span class="keyword">if</span> font != rear:</span><br><span class="line">            ex = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> ex</span><br><span class="line">print(isHuiWen(<span class="string">&#x27;addan&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="链表和顺序表"><a href="#链表和顺序表" class="headerlink" title="链表和顺序表"></a>链表和顺序表</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><ul><li>集合中存储的元素是有顺序的，顺序表的结构可以分为两种形式：单数据类型和多数据类型。</li><li><p>python中的列表和元组就属于多数据类型的顺序表</p></li><li><p>顺序表的弊端：顺序表的结构需要预先知道数据大小来申请连续的存储空间，而在进行扩充时又需要进行数据的搬迁。</p></li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><ul><li>相对于顺序表，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理且进行扩充时不需要进行数据搬迁。</li><li>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是不像顺序表一样连续存储数据，而是每一个结点（数据存储单元）里存放下一个结点的信息（即地址）</li></ul><h2 id="构造链表"><a href="#构造链表" class="headerlink" title="构造链表"></a>构造链表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">is_empty()：链表是否为空</span><br><span class="line"></span><br><span class="line">length()：链表长度</span><br><span class="line"></span><br><span class="line">travel()：遍历整个链表</span><br><span class="line"></span><br><span class="line">add(item)：链表头部添加元素</span><br><span class="line"></span><br><span class="line">append(item)：链表尾部添加元素</span><br><span class="line"></span><br><span class="line">insert(pos, item)：指定位置添加元素</span><br><span class="line"></span><br><span class="line">remove(item)：删除节点</span><br><span class="line"></span><br><span class="line">search(item)：查找节点是否存在</span><br></pre></td></tr></table></figure><ul><li>节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,item</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><ul><li>链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>():</span></span><br><span class="line">    <span class="comment"># 构建一个空链表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._head = <span class="literal">None</span> <span class="comment"># 永远指向链表中的头节点</span></span><br><span class="line">    <span class="comment"># 向链表的头部插入节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        node.<span class="built_in">next</span> = self._head</span><br><span class="line">        self._head = node</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span>(<span class="params">self</span>):</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="comment"># 链表为空则输出“链表为空”</span></span><br><span class="line">        <span class="keyword">if</span> self._head = <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">&quot;链表为空&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            print(cur.item)</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._head == <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span>(<span class="params">self</span>):</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        find = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur.item == item:</span><br><span class="line">                find = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> find</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self._head == <span class="literal">None</span>:</span><br><span class="line">            self._head = node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        cur = self._head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        pre.<span class="built_in">next</span> = node</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, pos, item</span>):</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> pos &lt; <span class="number">0</span> <span class="keyword">or</span> pos &gt; self.length():</span><br><span class="line">            print(<span class="string">&quot;重新给pos赋值&quot;</span>)</span><br><span class="line">            </span><br><span class="line">        cur = self._head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pos):</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        pre.<span class="built_in">next</span> = node</span><br><span class="line">        node.<span class="built_in">next</span> = cur</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self._head == <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">&quot;链表为空，没有可删除的节点&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 删除的是第一个节点的情况</span></span><br><span class="line">        <span class="keyword">if</span> self._head.item == item:</span><br><span class="line">            self._head = self._head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 删除的不是第一个节点的情况</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> cur.item == item:</span><br><span class="line">                pre.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h1 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h1><ul><li>当数据存储在诸如列表的集合中时，我们说这些数据具有线性或顺序关系。 每个数据元素都存储在相对于其他数据元素的位置。 由于这些索引值是有序的，我们可以按顺序访问它们。 这个过程产实现的搜索即为顺序查找。</li><li>顺序查找原理剖析：</li></ul><p>从列表中的第一个元素开始，我们按照基本的顺序排序，简单地从一个元素移动到另一个元素，直到找到我们正在寻找的元素或遍历完整个列表。如果我们遍历完整个列表，则说明正在搜索的元素不存在。</p><ul><li>代码实现：该函数需要一个列表和我们正在寻找的元素作为参数，并返回一个是否存在的布尔值。found 布尔变量初始化为 False，如果我们发现列表中的元素，则赋值为 True。</li><li><p>有序列表：之前我们列表中的元素是随机放置的，因此在元素之间没有相对顺序。如果元素以某种方式排序，顺序查找会发生什么？我们能够在搜索技术中取得更好的效率吗？</p></li><li><p>二分查找：一定是只可以被应用在有序列表中</p></li></ul><p>有序列表对于我们的实现搜索是很有用的。在顺序查找中，当我们与第一个元素进行比较时，如果第一个元素不是我们要查找的，则最多还有 n-1 个元素需要进行比较。 二分查找则是从中间元素开始，而不是按顺序查找列表。 如果该元素是我们正在寻找的元素，我们就完成了查找。 如果它不是，我们可以使用列表的有序性质来消除剩余元素的一半。如果我们正在查找的元素大于中间元素，就可以消除中间元素以及比中间元素小的一半元素。如果该元素在列表中，肯定在大的那半部分。然后我们可以用大的半部分重复该过程，继续从中间元素开始，将其与我们正在寻找的内容进行比较。</p><h2 id="二分查找实现"><a href="#二分查找实现" class="headerlink" title="二分查找实现"></a>二分查找实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">alist, item</span>):</span> <span class="comment"># item就是我们要找的元素</span></span><br><span class="line">    low = <span class="number">0</span> <span class="comment"># 进行二分查找操作的列表中的第一个元素的下标</span></span><br><span class="line">    high = <span class="built_in">len</span>(alist)</span><br><span class="line">    find = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low+high) // <span class="number">2</span> <span class="comment"># 中间元素的下标</span></span><br><span class="line">        <span class="keyword">if</span> item &gt; alist[mid]: <span class="comment"># 我们要找的数比中间的数大，则意味着我们要找的数在中间元素的右侧</span></span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> item &lt; alist[mid]: <span class="comment"># 我们要找的数比中间的数小，则我们要找的数在中间数的左侧</span></span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> find</span><br></pre></td></tr></table></figure><ul><li>test</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">print(sort(alist, <span class="number">51</span>))</span><br><span class="line"></span><br><span class="line">output:  <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><ul><li>根节点</li><li><p>左叶子节点</p></li><li><p>右叶子节点</p></li><li><p>子树</p></li><li><p>高度</p></li></ul><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><ul><li>广度遍历：逐层遍历</li><li><p>深度遍历</p></li><li><p>前序：根左右</p></li><li><p>中序：左根右</p></li><li><p>后序：左右根</p></li></ul><h2 id="构造普通二叉树"><a href="#构造普通二叉树" class="headerlink" title="构造普通二叉树"></a>构造普通二叉树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span>():</span></span><br><span class="line">    <span class="comment"># 构造出一颗空的二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item</span>):</span> <span class="comment"># root指向第一个节点的地址，如果root指向了None，则意味着该二叉树为空</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 向二叉树中插入节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addNode</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.root == <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># addNode如果第一次被调用则意味着：向空树中插入第一个节点，该节点一定是该树的根节点</span></span><br><span class="line">            self.root = node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 如果上面的if不执行则树为非空，下面就执行向一个非空的树中插入节点的操作</span></span><br><span class="line">        cur = self.root</span><br><span class="line">        queue = [cur]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            n = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> n.left != <span class="literal">None</span>:</span><br><span class="line">                queue.append(n.left)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n.left = node</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> n.right != <span class="literal">None</span>:</span><br><span class="line">                queue.append(n.right)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n.right = node</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 如果为空</span></span><br><span class="line">        <span class="keyword">if</span> self.root == <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">&quot;树为空！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        cur = self.root</span><br><span class="line">        queue = [cur]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            n = queue.pop(<span class="number">0</span>)</span><br><span class="line">            print(n.item)</span><br><span class="line">            <span class="keyword">if</span> n.left != <span class="literal">None</span>:</span><br><span class="line">                queue.append(n.left)</span><br><span class="line">            <span class="keyword">if</span> n.right != <span class="literal">None</span>:</span><br><span class="line">                queue.append(n.right)</span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        print(root.item)</span><br><span class="line">        self.forward(root.left)</span><br><span class="line">        self.forward(root.right)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middle</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.middle(root.left)</span><br><span class="line">        print(root.item)</span><br><span class="line">        self.middle(root.right)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">back</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.back(root.left)</span><br><span class="line">        self.back(root.right)</span><br><span class="line">        print(root.item)</span><br></pre></td></tr></table></figure><h2 id="构造排序二叉树"><a href="#构造排序二叉树" class="headerlink" title="构造排序二叉树"></a>构造排序二叉树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortTree</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertNode</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="comment"># 向空树插入第一个节点</span></span><br><span class="line">        <span class="keyword">if</span> self.root == <span class="literal">None</span>:</span><br><span class="line">            self.root = node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 树为非空的情况</span></span><br><span class="line">        cur = self.root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> node.item &gt; cur.item: <span class="comment"># 往右插</span></span><br><span class="line">                <span class="keyword">if</span> cur.right == <span class="literal">None</span>:</span><br><span class="line">                    cur.right = node</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur = cur.right</span><br><span class="line">            <span class="keyword">else</span>: <span class="comment">#往左插</span></span><br><span class="line">                <span class="keyword">if</span> cur.left = <span class="literal">None</span>:</span><br><span class="line">                    cur.left = node</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur = cur.left</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(root.item)</span><br><span class="line">        self.forward(root.left)</span><br><span class="line">        self.forward(root.right)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middle</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        self.middle(root.left)</span><br><span class="line">        print(root.item)</span><br><span class="line">        self.middle(root.right)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">back</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        self.back(root.left)</span><br><span class="line">        self.back(root.right)</span><br><span class="line">        print(root.item)</span><br></pre></td></tr></table></figure><h1 id="五大排序算法"><a href="#五大排序算法" class="headerlink" title="五大排序算法"></a>五大排序算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将列表元素中最大值找出放置在了列表中最后的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(alist)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">            alist[i], alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>], alist[i]</span><br><span class="line">    print(alist)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(alist)-<span class="number">1</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(alist)-<span class="number">1</span>-j): <span class="comment"># 空值比较的次数</span></span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                alist[i], alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>], alist[i]</span><br><span class="line">    print(alist)</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接将列表中最大值找出，放在列表最后的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="built_in">max</span> = <span class="number">0</span> <span class="comment"># max中存储的是列表中元素值最大的数的下标，最开始先假设列表下标为0对应的元素是最大值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(alist)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> alist[<span class="built_in">max</span>] &lt; alist[i+<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">max</span> = i+<span class="number">1</span></span><br><span class="line">    <span class="comment"># 将最大值放置到列表末尾的位置</span></span><br><span class="line">    alist[<span class="built_in">max</span>], alist[<span class="built_in">len</span>(alist)-<span class="number">1</span>] = alist[<span class="built_in">len</span>(alist)-<span class="number">1</span>], alist[<span class="built_in">max</span>]</span><br><span class="line">    print(alist)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(alist)-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># max中存储的是列表中元素值最大的数的下标。最开始先假设列表下标为0对应的元素是最大值</span></span><br><span class="line">        <span class="built_in">max</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, j): <span class="comment"># len(alist)-1 ==&gt; j</span></span><br><span class="line">            <span class="keyword">if</span> alist[<span class="built_in">max</span>] &lt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="built_in">max</span> = i+<span class="number">1</span></span><br><span class="line">        <span class="comment"># 将最大值放置到列表末尾的位置</span></span><br><span class="line">        alist[<span class="built_in">max</span>],alist[j] = alist[j],alist[<span class="built_in">max</span>]</span><br><span class="line">    print(alist)</span><br></pre></td></tr></table></figure><h2 id="插入排序（增量为1的希尔排序）"><a href="#插入排序（增量为1的希尔排序）" class="headerlink" title="插入排序（增量为1的希尔排序）"></a>插入排序（增量为1的希尔排序）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>,  <span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">8</span>,  <span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,  <span class="number">7</span>,<span class="number">6</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,  <span class="number">6</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>  ]</span><br><span class="line"><span class="comment"># step_1</span></span><br><span class="line">i = <span class="number">1</span> <span class="comment"># 表示的是列表中左部分有序部分的数据个数，其次还需要让i充当列表的下标</span></span><br><span class="line"><span class="comment"># alist[i] == 8,乱序部分的第一个数据</span></span><br><span class="line"><span class="comment"># alist[i-1] == 3，有序部分的第一个数据</span></span><br><span class="line"><span class="keyword">if</span> alist[i] &lt; alist[i-<span class="number">1</span>]:</span><br><span class="line">    alist[i],alist[i-<span class="number">1</span>] = alist[i-<span class="number">1</span>],alist[i]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="comment"># step_2</span></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="comment"># alist[i]乱序部分的第一个数据</span></span><br><span class="line"><span class="comment"># alist[i-1]:有序部分的第二个数</span></span><br><span class="line"><span class="keyword">while</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> alist[i] &lt; alist[i-<span class="number">1</span>]:</span><br><span class="line">        alist[i],alist[i-<span class="number">1</span>] = alist[i-<span class="number">1</span>],alist[i]</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># step_3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(alist)+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># alist[i]乱序部分的第一个数据</span></span><br><span class="line">    <span class="comment"># alist[i-1]:有序部分的第二个数</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> alist[i] &lt; alist[i-<span class="number">1</span>]:</span><br><span class="line">            alist[i],alist[i-<span class="number">1</span>] = alist[i-<span class="number">1</span>],alist[i]</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#完整的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(alist)):</span><br><span class="line">        <span class="comment">#alist[i]乱序部分的第一个数据</span></span><br><span class="line">        <span class="comment">#alist[i-1]:有序部分的第二个数</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> alist[i] &lt; alist[i-<span class="number">1</span>]:</span><br><span class="line">                alist[i],alist[i-<span class="number">1</span>] = alist[i-<span class="number">1</span>],alist[i]</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(alist)</span><br></pre></td></tr></table></figure><h2 id="希尔排序（特殊的插入排序）"><a href="#希尔排序（特殊的插入排序）" class="headerlink" title="希尔排序（特殊的插入排序）"></a>希尔排序（特殊的插入排序）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#step_1: 增量为1的希尔排序</span></span><br><span class="line">gap = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(alist)):</span><br><span class="line">        <span class="comment">#alist[i]乱序部分的第一个数据</span></span><br><span class="line">        <span class="comment">#alist[i-1]:有序部分的第二个数</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> alist[i] &lt; alist[i-<span class="number">1</span>]:</span><br><span class="line">                alist[i],alist[i-<span class="number">1</span>] = alist[i-<span class="number">1</span>],alist[i]</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(alist)</span><br><span class="line"><span class="comment">##step_1: 实现了增量为gap的希尔排序 == （插入排序）</span></span><br><span class="line">gap = <span class="built_in">len</span>(alist)//<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap,<span class="built_in">len</span>(alist)):</span><br><span class="line">        <span class="comment">#alist[i]乱序部分的第一个数据</span></span><br><span class="line">        <span class="comment">#alist[i-1]:有序部分的第二个数</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> alist[i] &lt; alist[i-gap]:</span><br><span class="line">                alist[i],alist[i-gap] = alist[i-gap],alist[i]</span><br><span class="line">                i -= gap</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(alist)</span><br><span class="line"><span class="comment">##step_3: 实现了增量为gap的希尔排序 == （插入排序）</span></span><br><span class="line">gap = <span class="built_in">len</span>(alist)//<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap,<span class="built_in">len</span>(alist)):</span><br><span class="line">        <span class="comment">#alist[i]乱序部分的第一个数据</span></span><br><span class="line">        <span class="comment">#alist[i-1]:有序部分的第二个数</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> alist[i] &lt; alist[i-gap]:</span><br><span class="line">                alist[i],alist[i-gap] = alist[i-gap],alist[i]</span><br><span class="line">                i -= gap</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(alist)</span><br><span class="line"><span class="comment">#最终代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">alist</span>):</span></span><br><span class="line">    gap = <span class="built_in">len</span>(alist)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap,<span class="built_in">len</span>(alist)):</span><br><span class="line">                <span class="comment">#alist[i]乱序部分的第一个数据</span></span><br><span class="line">                <span class="comment">#alist[i-1]:有序部分的第二个数</span></span><br><span class="line">                <span class="keyword">while</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> alist[i] &lt; alist[i-gap]:</span><br><span class="line">                        alist[i],alist[i-gap] = alist[i-gap],alist[i]</span><br><span class="line">                        i -= gap</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        gap //= <span class="number">2</span></span><br><span class="line">    print(alist)</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul><li>设定一个基数，就是原始列表中第0个列表元素的数据值，基数需要存储在一个mid的变量中</li><li><p>设定两个变量一个为low（对应列表第一个数据的下标），一个为high（对应列表最后一个数据的下标）</p></li><li><p>从右开始偏移high，需要将high指向的数值跟基数进行大小比较，如果high指向的数值&gt;基数，则让high向左偏移一位，继续进行比较，直到high指向的数值小于了基数，则停止high的偏移，将high指向的数值放置在low的位置，然后开始偏移low</p></li><li><p>从左往右偏移low，如果low指向的数值小于基数，则将low向右偏移一位，如果low指向的数值大于了基数，则停止low的偏移，且将low指向的数值赋值到high的位置，然后偏移high</p></li><li><p>当low和high重复相遇后，将基数赋值到low或者high指向的位置</p></li><li>将上述操作递归执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">alist,start,end</span>):</span></span><br><span class="line">    low = start</span><br><span class="line">    high = end</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> low &gt; high:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    mid = alist[low]</span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="keyword">if</span> alist[high] &gt; mid:<span class="comment">#将high向左偏移</span></span><br><span class="line">                high -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                alist[low] = alist[high]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="keyword">if</span> alist[low] &lt; mid:<span class="comment">#向右移动low</span></span><br><span class="line">                low += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                alist[high] = alist[low]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> low == high:</span><br><span class="line">        alist[low] = mid<span class="comment">#alist[high] = mid</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">#将sort的操作作用到基数左侧部分</span></span><br><span class="line">    sort(alist,start,low-<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#将sort的操作作用的基数右侧部分</span></span><br><span class="line">    sort(alist,high+<span class="number">1</span>,end)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line">alist = [<span class="number">6</span> ,<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">8</span>]</span><br><span class="line">alist = sort(alist,<span class="number">0</span>,<span class="built_in">len</span>(alist)-<span class="number">1</span>)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习总结</summary>
    
    
    
    <category term="🍡godlucas" scheme="https://godlucas.club/categories/%F0%9F%8D%A1godlucas/"/>
    
    
    <category term="📁Python" scheme="https://godlucas.club/tags/%F0%9F%93%81Python/"/>
    
    <category term="🦋数据结构与算法" scheme="https://godlucas.club/tags/%F0%9F%A6%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
